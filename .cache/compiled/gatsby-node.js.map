{"mappings":"ysCAAA,IAAAA,EAAAC,EAAA,kD,+DASaC,I,8BAgHAC,I,8BAmDAC,I,4CAgCAC,IA5Mb,IAAAC,EAAAL,EAAA,Q,sBACAM,EAAAN,EAAA,UACAO,EAAAP,EAAA,wBAEAQ,EAAAR,EAAA,4BACAS,EAAAT,EAAA,iC,sBACAU,EAAAV,EAAA,mBAGO,MAAMC,EAA6D,EACxEU,cAEAA,EAAQC,iBAAiB,CACvBC,QAAS,CACPC,QAAS,CAAC,IAAI,EAAAC,EAAAC,YAElB,EAyGWd,EAAyCe,OACpDN,SAAWO,cACXC,sBACAC,eACAC,eAEA,MAAMC,EAAsB,IAAI,EAAAZ,EAAAa,eAAc,iCACxCC,QAAsBF,EAAoBG,QA7GrB,seA8GnBC,UAAUC,KAAEA,IAAWH,EAEzBI,QAAeC,QAAQC,IAAIH,EAAKI,KAAKd,OAASe,uBACpC,EAAAxB,EAAAyB,sBAAqB,CACjCC,IAAK,wBAAwBF,GAAYG,OAAOR,MAAMK,YAAYE,MAClEhB,aACAE,eACAC,cACEe,MAENT,EAAKU,SAASpB,OAASe,YAAcM,QAAOC,cAAaC,OAAMC,SAAQC,gBAAgBC,KACrF,MAAMC,GAAU,EAAArC,EAAAsC,UACdJ,EACGK,QAAOC,GAASC,OAAOC,OAAOF,EAAO,UACrChB,KAAI,EAAGmB,UAAW5C,EAAA6C,OAAOC,MAAMF,KAC/BG,QAGCC,EAA+B,CACnChB,QACAC,cACAC,OACAe,MAAO3B,EAAOe,GACdC,UACAF,gBAGF,EAAAnC,EAAAsC,UAAS,mBAET3B,EAAW,IACNoC,EACHlB,GAAIhB,EAAakC,EAAcd,MAC/BgB,SAAU,CACRC,KAAM,gBACNC,cAAevC,EAAoBmC,KAEvC,GACF,EAKIK,EAAkBC,EAAA5C,QAAKH,QAAQ,+BACxBV,EAAyCc,OAASN,SAAWkD,cAAcC,cACtF,MAAMC,QAAyBD,EAAwB,wXAqBvDC,GAAkBpC,MAAMoC,kBAAkBC,OAAO3B,SAAQ4B,IACvDJ,EAAW,CACTK,KAAM,aAAaD,GAASzB,OAC5B2B,UAAWR,EACXS,QAASH,GACX,GACF,EAIW7D,EAAqE,EAAGO,SAAW0D,kBAC9FA,EAAY,2F,yTC7MdC,EAAQC,eAAiB,SAAUC,GACjC,OAAOA,GAAKA,EAAEC,WAAaD,EAAI,CAACxD,QAASwD,EAC3C,EAEAF,EAAQI,kBAAoB,SAAUF,GACpCxB,OAAO2B,eAAeH,EAAG,aAAc,CAACI,OAAO,GACjD,EAEAN,EAAQO,UAAY,SAAUC,EAAQC,GAcpC,OAbA/B,OAAOgC,KAAKF,GAAQzC,SAAQ,SAAU4C,GACxB,YAARA,GAA6B,eAARA,GAAwBF,EAAKG,eAAeD,IAIrEjC,OAAO2B,eAAeI,EAAME,EAAK,CAC/BE,YAAY,EACZC,IAAK,WACH,OAAON,EAAOG,EAChB,GAEJ,IAEOF,CACT,EAEAT,EAAQe,OAAS,SAAUN,EAAMO,EAAUF,GACzCpC,OAAO2B,eAAeI,EAAMO,EAAU,CACpCH,YAAY,EACZC,IAAKA,GAET,C","sources":["gatsby-node.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["import path from \"path\";\nimport { marked } from \"marked\";\nimport { sanitize } from \"isomorphic-dompurify\";\nimport { type GatsbyNode, useStaticQuery } from \"gatsby\";\nimport { createRemoteFileNode } from \"gatsby-source-filesystem\";\nimport TsconfigPathsPlugin from \"tsconfig-paths-webpack-plugin\";\nimport { GraphQLClient } from \"graphql-request\";\n\n\nexport const onCreateWebpackConfig: GatsbyNode[\"onCreateWebpackConfig\"] = ({\n  actions,\n}) => {\n  actions.setWebpackConfig({\n    resolve: {\n      plugins: [new TsconfigPathsPlugin()]\n    },\n  });\n};\n\nconst getAllStrapiArticles = `\n  query GetAllStrapiArticles {\n    articles(sort: \"publishedAt:desc\") {\n      data {\n        id\n        attributes {\n          title\n          description\n          slug\n          cover {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          blocks {\n            ...on ComponentSharedRichText {\n              body\n            }\n          }\n          publishedAt\n        }\n      }\n    }\n  }\n`;\n\nconst getAllMeetupEvents = `\n  query GetAllMeetupEvents {\n    proNetworkByUrlname(urlname: \"strong-towns-oceanside\") {\n      eventsSearch(filter: { status: UPCOMING }, input: { first: 5 }) {\n        edges {\n          node {\n            title\n            eventUrl\n            description\n            howToFindUs\n            venue {\n              name\n              address\n              city\n              state\n              postalCode\n            }\n            images {\n              baseUrl\n              source\n            }\n            dateTime\n            duration\n          }\n        }\n      }\n    }\n  }\n`;\n\ntype ComponentSharedRichText = {\n  body: string\n};\ntype UploadFile = {\n  url: string\n};\ntype UploadFileEntity = {\n  attributes: UploadFile\n};\ntype UploadFileEntityResponse = {\n  data: UploadFileEntity\n};\ntype Article = {\n  title: string\n  description: string\n  slug: string\n  cover: UploadFileEntityResponse\n  blocks: [ComponentSharedRichText]\n  publishedAt: Date\n};\ntype ArticleEntity = {\n  id: Number\n  attributes: Article\n};\ntype ArticleEntityResponseCollection = {\n  data: [ArticleEntity]\n};\ninterface ArticleResponse {\n  articles: ArticleEntityResponseCollection\n};\ntype GatsbyArticle = {\n  title: string\n  description: string\n  slug: string\n  image: string\n  content: string\n  publishedAt: Date\n};\ninterface GatsbyArticles {\n  allGatsbyArticle: {\n    nodes: [GatsbyArticle]\n  }\n}\n\nexport const sourceNodes: GatsbyNode[\"sourceNodes\"] = async ({\n  actions: { createNode },\n  createContentDigest,\n  createNodeId,\n  getCache\n}) => {\n  const strapiGraphqlClient = new GraphQLClient(\"http://localhost:1337/graphql\");\n  const articleResult = await strapiGraphqlClient.request<ArticleResponse>(getAllStrapiArticles);\n  const { articles: { data } } = articleResult;\n\n  const images = await Promise.all(data.map( async ({ attributes }) => {\n    return (await createRemoteFileNode({\n      url: `http://localhost:1337${attributes?.cover?.data?.attributes?.url}`,\n      createNode,\n      createNodeId,\n      getCache,\n    })).id;\n  }));\n  data.forEach( async ({ attributes: { title, description, slug, blocks, publishedAt }}, i) => {\n    const content = sanitize(\n      blocks\n        .filter(block => Object.hasOwn(block, 'body'))\n        .map(({ body }) => marked.parse(body))\n        .join()\n    );\n\n    const gatsbyArticle: GatsbyArticle = {\n      title,\n      description,\n      slug,\n      image: images[i],\n      content,\n      publishedAt\n    };\n\n    sanitize(\"<div>test</div>\")\n\n    createNode({\n      ...gatsbyArticle,\n      id: createNodeId(gatsbyArticle.slug),\n      internal: {\n        type: `GatsbyArticle`,\n        contentDigest: createContentDigest(gatsbyArticle)\n      }\n    });\n  });\n\n  // TODO - add meetup integration\n};\n\nconst articleTemplate = path.resolve(\"./src/templates/article.tsx\");\nexport const createPages: GatsbyNode[\"createPages\"] = async ({ actions: { createPage }, graphql }) => {\n  const allGatsbyArticle = await graphql<GatsbyArticles>(`\n    query AllGatsbyArticle {\n      allGatsbyArticle {\n        nodes {\n          title\n          description\n          slug\n          image {\n            childImageSharp {\n              gatsbyImageData(\n                width: 700\n                placeholder: BLURRED\n              )\n            }\n          }\n          content\n        }\n      }\n    }\n  `);\n\n  allGatsbyArticle?.data?.allGatsbyArticle?.nodes?.forEach(article => {\n    createPage({\n      path: `/articles/${article?.slug}`,\n      component: articleTemplate,\n      context: article\n    });\n  });\n    // TODO - add meetup integration\n};\n\nexport const createSchemaCustomization: GatsbyNode[`createSchemaCustomization`] = ({ actions: { createTypes } }) =>\n  createTypes(`\n    type GatsbyArticle implements Node {\n      image: File @link(by: \"id\")\n    }\n  `);\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["parcelHelpers","require","onCreateWebpackConfig","sourceNodes","createPages","createSchemaCustomization","_path","_marked","_isomorphicDompurify","_gatsbySourceFilesystem","_tsconfigPathsWebpackPlugin","_graphqlRequest","actions","setWebpackConfig","resolve","plugins","_tsconfigPathsWebpackPluginDefault","default","async","createNode","createContentDigest","createNodeId","getCache","strapiGraphqlClient","GraphQLClient","articleResult","request","articles","data","images","Promise","all","map","attributes","createRemoteFileNode","url","cover","id","forEach","title","description","slug","blocks","publishedAt","i","content","sanitize","filter","block","Object","hasOwn","body","marked","parse","join","gatsbyArticle","image","internal","type","contentDigest","articleTemplate","_pathDefault","createPage","graphql","allGatsbyArticle","nodes","article","path","component","context","createTypes","exports","interopDefault","a","__esModule","defineInteropFlag","defineProperty","value","exportAll","source","dest","keys","key","hasOwnProperty","enumerable","get","export","destName"],"version":3,"file":"gatsby-node.js.map","sourceRoot":"../../"}